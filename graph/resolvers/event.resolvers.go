package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"fmt"
	"gqlgen-subscriptions/graph/model"

	"github.com/google/uuid"
)

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, text string) (*model.Event, error) {
	newEvent := &model.Event{ID: uuid.NewString(), Text: text}
	r.Pubsub.Publish("newEvent", newEvent)
	return newEvent, nil
}

// EventCreated is the resolver for the eventCreated field.
func (r *subscriptionResolver) EventCreated(ctx context.Context, who *string) (<-chan *model.Event, error) {
	channel := r.Pubsub.Subscribe("newEvent")

	if who != nil {
		fmt.Printf("%s subscribed\n", *who)
	} else {
		fmt.Println("Someone subscribed")
	}

	go func() {
		<-ctx.Done()
		r.Pubsub.Unsubscribe("newEvent", channel)
		if who != nil {
			fmt.Printf("%s unsubscribed\n", *who)
		} else {
			fmt.Println("Someone unsubscribed")
		}
	}()
	return channel, nil
}
